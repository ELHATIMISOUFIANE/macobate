---
import { getTranslations, getAlternateUrl } from "../../i18n/translations.js";

// Déterminer la langue actuelle
const currentPath = Astro.url.pathname;
const lang = currentPath.startsWith("/fr") ? "fr" : "en";
const t = getTranslations(lang);

// Générer les URLs pour le menu
const getUrl = (path) => {
  return lang === "fr" ? "/fr" + path : path;
};

// Configuration du menu avec traductions
const mainMenuItems = [
  {
    title: t.nav.home,
    url: getUrl("/"),
    hasSubmenu: false,
    showInMainOnly: false,
  },
  {
    title: t.nav.about,
    url: getUrl("/about"),
    hasSubmenu: true,
    showInMainOnly: false,
    submenu: [
      { title: t.nav.aboutSubmenu.pride, url: getUrl("/about/pride") },
      // { title: t.nav.aboutSubmenu.achievements, url: getUrl('/about#achived-section') },
      {
        title: t.nav.aboutSubmenu.history,
        url: getUrl("/about#history-section"),
      },
      { title: t.nav.aboutSubmenu.strengths, url: getUrl("/quality") },
      // { title: t.nav.aboutSubmenu.services, url: getUrl('/services/allServices') },
    ],
  },
  {
    title: t.nav.activities,
    url: getUrl("/services/detailServices"),
    hasSubmenu: true,
    showInMainOnly: false,
    submenu: [
      {
        title: t.nav.activitiesSubmenu.activity1,
        url: getUrl("/services/detailServices#charpente-metallique"),
      },
      {
        title: t.nav.activitiesSubmenu.activity2,
        url: getUrl("/services/detailServices#appareils-pression"),
      },
      {
        title: t.nav.activitiesSubmenu.activity3,
        url: getUrl("/services/detailServices#reservoirs-stockage"),
      },
      {
        title: t.nav.activitiesSubmenu.activity4,
        url: getUrl("/services/detailServices#equipements-hydromecaniques"),
      },
      {
        title: t.nav.activitiesSubmenu.activity5,
        url: getUrl("/services/detailServices#traitement-eau"),
      },
      {
        title: t.nav.activitiesSubmenu.activity6,
        url: getUrl("/services/detailServices#electricite-automatismes"),
      },
      {
        title: t.nav.activitiesSubmenu.activity7,
        url: getUrl("/services/detailServices#traitement-eau"),
      },
    ],
  },

  {
    title: t.nav.brands,
    url: getUrl("/our-brands/robex"),
    hasSubmenu: true,
    showInMainOnly: false,
    submenu: [
      { title: t.nav.brandsSubmenu.robex, url: getUrl("/our-brands/robex") },
      { title: t.nav.brandsSubmenu.cranex, url: getUrl("/our-brands/cranex") },
      { title: t.nav.brandsSubmenu.tanko, url: getUrl("/our-brands/tanko") },
      { title: t.nav.brandsSubmenu.mws, url: getUrl("/our-brands/mws") },
    ],
  },
  {
    title: t.nav.news,
    url: getUrl("/blog"),
    hasSubmenu: false,
    showInMainOnly: false,
  },
  {
    title: t.nav.careers,
    url: getUrl("/career"),
    hasSubmenu: false,
    showInMainOnly: true,
  },
  // ... autres éléments
];
const mainMenuFiltered = mainMenuItems.filter((item) => !item.showInMainOnly);
---

<header class="main-header">
  <!-- Barre Supérieure -->
  <div class="header-top">
    <div class="auto-container">
      <div class="top-outer clearfix">
        <div class="top-left">
          <ul class="links clearfix">
            <li>
              <a href={`tel:${t.header.phone}`}>
                <span class="icon fa fa-phone"></span>{t.header.phone}
              </a>
            </li>
            <li>
              <a href={`mailto:${t.header.email}`}>
                <span class="icon fa fa-envelope-o"></span>{t.header.email}
              </a>
            </li>
            <li>
              <a href="https://www.google.com/maps?q=34.021972,-6.836359">
                <span class="icon flaticon-placeholder-2"></span>{
                  t.header.address
                }
              </a>
            </li>
          </ul>
        </div>

        <!-- Sélecteur de langue -->
        <div class="top-right clearfix">
          <ul class="clearfix">
            <li class="language dropdown">
              <a
                class="btn btn-default dropdown-toggle"
                id="dropdownMenu2"
                data-toggle="dropdown"
                aria-haspopup="true"
                aria-expanded="true"
                href="#"
              >
                <span class="flag-img">
                  <img src={`/images/icons/${lang}.png`} alt="Flag" />
                </span>
                {t.header.languageLabel}
                &nbsp;<span class="fa fa-angle-down"></span>
              </a>
              <ul
                class="dropdown-menu style-one"
                aria-labelledby="dropdownMenu2"
              >
                <li>
                  <a href={getAlternateUrl(currentPath, "fr")}>Français</a>
                </li>
                <li>
                  <a href={getAlternateUrl(currentPath, "en")}>English</a>
                </li>
              </ul>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </div>

  <!-- Menu principal -->
  <div class="main-box">
    <div class="auto-container">
      <div class="outer-container clearfix">
        <div class="logo-box">
          <div class="logo">
            <a href={getUrl("/")}>
              <img src="/images/logo.png" alt="Logo MACOBATE" />
            </a>
          </div>
        </div>

        <div class="nav-outer clearfix">
          <nav class="main-menu">
            <div class="navbar-collapse collapse clearfix">
              <ul class="navigation clearfix">
                {
                  mainMenuFiltered.map((item) => (
                    <li class={item.hasSubmenu ? "dropdown" : ""}>
                      <a href={item.url} class="menu-link"  data-url={item.url}>
                        {item.title}
                        {item.hasSubmenu && <span class="fa fa-angle-down " />}
                      </a>
                      {item.hasSubmenu && (
                        <ul>
                          {item.submenu.map((subItem) => (
                            <li>
                              <a href={subItem.url} class="menu-link">{subItem.title}</a>
                            </li>
                          ))}
                        </ul>
                      )}
                    </li>
                  ))
                }
              </ul>
            </div>
          </nav>
          <div class="outer-box">
            <a href={getUrl("/formDevis")} class="theme-btn quote-btn">
              {t.header.requestQuote}<span class="icon"></span>
            </a>
            <ul class="social-icon-one">
              <!-- <li>
                <a href="https://www.facebook.com/macobate/#"
                  ><span class="fa fa-facebook"></span></a>
              </li> -->
              <li>
                <a href="https://ma.linkedin.com/company/macobate"><span class="fa fa-linkedin"></span></a>
              </li>
              
            </ul>
          </div>
          <!-- <div class="outer-box">
            <a href={getUrl('/formDevis')} class="theme-btn quote-btn">
              {t.header.requestQuote}<span class="icon"></span>
            </a>
          </div> -->
        </div>
      </div>
    </div>
  </div>
  <!--En-tête Fixe-->
  <div class="sticky-header">
    <div class="auto-container">
      <div class="outer-container clearfix">
        <!--Boîte Logo-->
        <div class="logo-box pull-left">
          <div class="logo">
            <a href={getUrl("/")}>
              <img src="/images/logo-small.png" alt="Logo MACOBATE" />
            </a>
          </div>
        </div>

        <!--Navigation Externe-->
        <div class="nav-outer clearfix">
          <!-- Menu Principal -->
          <nav class="main-menu">
            <div class="navbar-header">
              <!-- Bouton Toggle -->
              <button
                type="button"
                class="navbar-toggle"
                data-toggle="collapse"
                data-target=".navbar-collapse"
              >
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
            </div>

            <div class="navbar-collapse collapse clearfix">
              <ul class="navigation clearfix">
                {
                  mainMenuItems.map((item) => (
                    <li class={item.hasSubmenu ? "dropdown" : ""}>
                      <a href={item.url} class="menu-link" data-url={item.url}>
                        {item.title}
                        {item.hasSubmenu && <span class="fa fa-angle-down" />}
                      </a>
                      {item.hasSubmenu && (
                        <ul>
                          {item.submenu.map((subItem) => (
                            <li>
                              <a
                                href={subItem.url}
                                class="menu-link"
                                data-url={subItem.url}
                              >
                                {subItem.title}
                              </a>
                            </li>
                          ))}
                        </ul>
                      )}
                    </li>
                  ))
                }
              </ul>
            </div>
          </nav>
          <!-- Fin Menu Principal-->
        </div>
        <!--Fin Navigation Externe-->
      </div>
    </div>
  </div>
</header>
<!--Fin En-tête Principal -->

<style>
  /* Styles pour les sous-menus améliorés */
  .main-menu .navigation > li > ul {
    position: absolute;
    left: 0px;
    top: 100%;
    width: 230px;
    z-index: 100;
    display: none;
    background: #ffffff;
    border-top: 3px solid #2e80fa;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
  }

  .main-menu .navigation > li > ul > li {
    position: relative;
    width: 100%;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }

  .main-menu .navigation > li > ul > li:last-child {
    border-bottom: none;
  }

  .main-menu .navigation > li > ul > li > a {
    position: relative;
    display: block;
    padding: 10px 15px;
    line-height: 24px;
    font-weight: 400;
    font-size: 14px;
    color: #333333;
    text-align: left;
    text-transform: capitalize;
    transition: all 500ms ease;
    -moz-transition: all 500ms ease;
    -webkit-transition: all 500ms ease;
    -ms-transition: all 500ms ease;
    -o-transition: all 500ms ease;
  }

  .main-menu .navigation > li > ul > li:hover > a {
    background: #2e80fa;
    color: #ffffff;
  }

  /* Sous-menus de niveau 3 */
  .main-menu .navigation > li > ul > li > ul {
    position: absolute;
    left: 100%;
    top: 0px;
    width: 230px;
    z-index: 100;
    display: none;
    background: #ffffff;
    border-top: 3px solid #2e80fa;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
  }

  .main-menu .navigation > li > ul > li > ul > li {
    position: relative;
    width: 100%;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }

  .main-menu .navigation > li > ul > li > ul > li:last-child {
    border-bottom: none;
  }

  .main-menu .navigation > li > ul > li > ul > li > a {
    position: relative;
    display: block;
    padding: 10px 15px;
    line-height: 24px;
    font-weight: 400;
    font-size: 14px;
    color: #333333;
    text-align: left;
    text-transform: capitalize;
    transition: all 500ms ease;
    -moz-transition: all 500ms ease;
    -webkit-transition: all 500ms ease;
    -ms-transition: all 500ms ease;
    -o-transition: all 500ms ease;
  }

  .main-menu .navigation > li > ul > li > ul > li:hover > a {
    background: #2e80fa;
    color: #ffffff;
  }

  /* Afficher les sous-menus au survol */
  .main-menu .navigation li:hover > ul {
    display: block;
  }

  /* Indicateur de menu actif */
  .main-menu .navigation > li.current > a,
  .main-menu .navigation > li:hover > a {
    color: #2e80fa;
    opacity: 1;
  }

  .main-menu .navigation > li > ul > li.current > a,
  .main-menu .navigation > li > ul > li > ul > li.current > a {
    background: #0b56b9;
    color: #ffffff;
  }

  /* Styles améliorés pour les éléments actifs */
  .main-menu .navigation > li.current {
    position: relative;
  }

  .main-menu .navigation > li.current:after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background-color: #2e80fa;
    transition: all 0.3s ease;
  }

  .main-menu .navigation > li.current > a {
    color: #2e80fa;
    font-weight: 600;
  }

  /* Animation pour le survol des liens */
  .main-menu .navigation > li > a {
    transition: all 0.3s ease;
  }

  .main-menu .navigation > li:hover > a {
    color: #2e80fa;
  }
</style>

<script>
  // Script amélioré pour gérer l'état actif des liens de navigation
  document.addEventListener("DOMContentLoaded", function () {
    // Récupérer les informations sur l'URL actuelle
    const currentPath = window.location.pathname;
    const currentHash = window.location.hash;
    const currentUrl = currentPath + (currentHash || "");

    // Fonction pour marquer un élément comme actif
    function markAsActive(element) {
      // Trouver le li parent le plus proche
      const parentLi = element.closest("li");
      if (parentLi) {
        // Ajouter la classe 'current' au li
        parentLi.classList.add("current");

        // Si le parent est dans un dropdown, marquer également le dropdown
        const parentDropdown = parentLi.closest(".dropdown");
        if (parentDropdown && parentDropdown !== parentLi) {
          parentDropdown.classList.add("current");
        }
      }
    }

    // Fonction pour marquer les liens correspondant à l'URL actuelle
    function markActiveLinks() {
      // Sélectionner tous les liens dans le menu
      const navLinks = document.querySelectorAll(".navigation .menu-link");

      navLinks.forEach((link) => {
        const linkUrl = link.getAttribute("href");

        // Vérifier les correspondances exactes
        if (linkUrl === currentPath) {
          markAsActive(link);
        }

        // Vérifier les correspondances avec hash
        if (currentHash && linkUrl === currentUrl) {
          markAsActive(link);
        }

        // Vérifier les URL contenant un hash spécifique
        if (currentHash && linkUrl.includes(currentHash)) {
          markAsActive(link);
        }

        // Vérifier si nous sommes sur la page de services/detailServices avec un hash
        if (
          currentPath.includes("/services/detailServices") &&
          linkUrl.includes("/services/detailServices#")
        ) {
          const linkHash = linkUrl.split("#")[1];
          if (currentHash && currentHash.substring(1) === linkHash) {
            markAsActive(link);
          }
        }
      });
    }

    // Fonction de défilement fluide pour les ancres
    function smoothScroll(targetId) {
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        const headerOffset = 100; // Hauteur de l'en-tête fixe
        const elementPosition = targetElement.getBoundingClientRect().top;
        const offsetPosition =
          elementPosition + window.pageYOffset - headerOffset;

        window.scrollTo({
          top: offsetPosition,
          behavior: "smooth",
        });
      }
    }

    const sectionMap = {
      "company-section": ".company-section",
      "highlights-section": ".highlights-section",
      "history-section": ".history-section",
      "achived-section": ".achived-section",
      "team-section": ".team-section",
      allServices: ".services",
      "charpente-metallique": ".charpente-metallique",
      "electricite-automatismes": ".electricite-automatismes",
    };

    if (window.location.pathname === "/about") {
      for (const [id, selector] of Object.entries(sectionMap)) {
        const section = document.querySelector(selector);
        if (section) section.id = id;
      }
    }

    // Gérer les clics sur les liens d'ancrage
    document.querySelectorAll(".menu-link").forEach((link) => {
      link.addEventListener("click", function (e) {
        const href = this.getAttribute("href");

        // Si le lien contient un hash
        if (href.includes("#")) {
          const parts = href.split("#");
          const pagePath = parts[0];
          const targetId = parts[1];

          // Si nous sommes déjà sur la bonne page ou si c'est juste une ancre
          // if (pagePath === "" || pagePath === currentPath) {
          //   e.preventDefault();

          //   // Marquer ce lien comme actif
          //   document.querySelectorAll(".navigation li").forEach((li) => {
          //     li.classList.remove("current");
          //   });
          //   markAsActive(this);

          //   // Faire défiler jusqu'à l'ancre
          //   smoothScroll(targetId);

          //   // Mettre à jour l'URL sans recharger la page
          //   history.pushState(null, null, `#${targetId}`);

          // }
        }
      });
    });

    // Gérer les changements de hash dans l'URL
    window.addEventListener("hashchange", function () {
      const newHash = window.location.hash;
      if (newHash) {
        const targetId = newHash.substring(1);

        // Mettre à jour les liens actifs
        document.querySelectorAll(".navigation li").forEach((li) => {
          li.classList.remove("current");
        });

        const matchingLinks = document.querySelectorAll(
          `.menu-link[href$="#${targetId}"]`
        );
        matchingLinks.forEach((link) => {
          markAsActive(link);
        });

        // Faire défiler jusqu'à l'ancre
        smoothScroll(targetId);
      }
    });

    // Initialiser les liens actifs
    markActiveLinks();

    // Ajouter des boutons +/- pour les sous-menus sur mobile
    if (window.innerWidth <= 991) {
      document
        .querySelectorAll(".navigation li.dropdown")
        .forEach(function (item) {
          const dropdownBtn = document.createElement("div");
          dropdownBtn.className = "dropdown-btn";
          dropdownBtn.innerHTML = "+";
          item.appendChild(dropdownBtn);

          dropdownBtn.addEventListener("click", function (e) {
            e.preventDefault();
            e.stopPropagation();

            const subMenu = this.parentElement.querySelector("ul");
            if (subMenu) {
              if (subMenu.style.display === "block") {
                subMenu.style.display = "none";
                this.innerHTML = "+";
              } else {
                subMenu.style.display = "block";
                this.innerHTML = "-";
              }
            }
          });
        });
    }

    // Gestion du header sticky
    window.addEventListener("scroll", function () {
      const stickyHeader = document.querySelector(".sticky-header");
      const mainHeader = document.querySelector(".main-header");

      if (window.innerWidth > 767) {
        if (window.pageYOffset > 150) {
          stickyHeader.classList.add("is-sticky");
          stickyHeader.style.display = "block";
          stickyHeader.style.position = "fixed";
          stickyHeader.style.top = "0";
          stickyHeader.style.left = "0";
          stickyHeader.style.right = "0";
          stickyHeader.style.zIndex = "999";
          stickyHeader.style.animation = "fadeIn 0.4s ease-out forwards";

          // Ajouter une classe au header principal
          mainHeader.classList.add("has-sticky-active");
        } else {
          stickyHeader.classList.remove("is-sticky");
          stickyHeader.style.display = "none";
          mainHeader.classList.remove("has-sticky-active");
        }
      }
    });

    // Animation des sous-menus sur desktop
    if (window.innerWidth > 991) {
      document
        .querySelectorAll(".navigation li.dropdown")
        .forEach(function (item) {
          item.addEventListener("mouseenter", function () {
            const subMenu = this.querySelector("ul");
            if (subMenu) {
              subMenu.style.display = "block";
              subMenu.style.opacity = "0";
              subMenu.style.transform = "translateY(10px)";

              // Forcer un reflow
              subMenu.offsetHeight;

              // Animer l'apparition
              subMenu.style.transition =
                "opacity 0.3s ease, transform 0.3s ease";
              subMenu.style.opacity = "1";
              subMenu.style.transform = "translateY(0)";
            }
          });

          item.addEventListener("mouseleave", function () {
            const subMenu = this.querySelector("ul");
            if (subMenu) {
              subMenu.style.opacity = "0";
              subMenu.style.transform = "translateY(10px)";

              setTimeout(function () {
                if (!item.matches(":hover")) {
                  subMenu.style.display = "none";
                }
              }, 300);
            }
          });
        });
    }

    // Synchronisation avec d'autres sections du site
    // Cette fonction vérifie si d'autres éléments de la page (comme un menu latéral)
    // ont besoin d'être synchronisés avec le menu principal
    function syncWithSidebarMenu() {
      try {
        // Regarder s'il y a un menu latéral (comme dans la page services)
        const sidebarLinks = document.querySelectorAll(".service-link");
        if (sidebarLinks.length > 0) {
          // Si un hash est présent dans l'URL
          if (currentHash) {
            const serviceId = currentHash.substring(1);

            // Mettre à jour l'état actif dans le menu latéral
            sidebarLinks.forEach((link) => {
              link.classList.remove("active");
              const linkId = link.getAttribute("data-service-id");
              if (linkId === serviceId) {
                link.classList.add("active");

                // Trouver le li parent et ajouter aussi la classe active
                const parentLi = link.closest("li");
                if (parentLi) {
                  parentLi.classList.add("active-item");
                }
              }
            });
          }
        }
      } catch (e) {
        console.warn("Error syncing with sidebar menu", e);
      }
    }

    // Exécuter la synchronisation au chargement
    syncWithSidebarMenu();

    // Synchroniser également lorsque le hash de l'URL change
    window.addEventListener("hashchange", syncWithSidebarMenu);
  });
</script>
